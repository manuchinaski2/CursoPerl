.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Fluidinfo::Object 3"
.TH Net::Fluidinfo::Object 3 "2012-02-12" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Fluidinfo::Object \- Fluidinfo objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Net::Fluidinfo::Object;
\&
\& # create, with optional about
\& $object = Net::Fluidinfo::Object\->new(
\&     fin   => $fin,
\&     about => $unique_about
\& );
\& $object\->create;
\& $object\->id; # returns the object\*(Aqs ID in Fluidinfo
\&
\& # get by ID, optionally fetching about
\& $object = Net::Fluidinfo::Object\->get_by_id($fin, $id, about => 1);
\&
\& # get by about
\& $object = Net::Fluidinfo::Object\->get_by_about($fin, $about);
\&
\& # tag
\& $object\->tag("fxn/likes");
\& $object\->tag("fxn/rating", integer => 10);
\& $object\->tag("fxn/avatar", \*(Aqimage/png\*(Aq => $image);
\&
\& # retrieve a tag value
\& $value = $object\->value("fxn/rating");
\&
\& # retrieve a tag value and its type
\& ($type, $value) = $object\->value("fxn/rating");
\&
\& # remove a tag
\& $object\->untag("fxn/rating");
\&
\& # search
\& @ids = Net::Fluidinfo::Object\->search($fin, "has fxn/rating");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::Fluidinfo::Object\*(C'\fR models Fluidinfo objects.
.SH "USAGE"
.IX Header "USAGE"
.SS "Inheritance"
.IX Subsection "Inheritance"
\&\f(CW\*(C`Net::Fluidinfo::Object\*(C'\fR is a subclass of Net::Fluidinfo::Base.
.SS "Class methods"
.IX Subsection "Class methods"
.IP "Net::Fluidinfo::Object\->new(%attrs)" 4
.IX Item "Net::Fluidinfo::Object->new(%attrs)"
Constructs a new object. The constructor accepts these parameters:
.RS 4
.IP "fin (required)" 4
.IX Item "fin (required)"
An instance of Net::Fluidinfo.
.IP "about (optional)" 4
.IX Item "about (optional)"
A string, if any.
.RE
.RS 4
.Sp
This constructor is only useful for creating new objects in Fluidinfo.
Already existing objects are fetched with \f(CW\*(C`get_by_id\*(C'\fR or \f(CW\*(C`get_by_about\*(C'\fR:
.RE
.ie n .IP "Net::Fluidinfo::Object\->get_by_id($fin, $id, %opts)" 4
.el .IP "Net::Fluidinfo::Object\->get_by_id($fin, \f(CW$id\fR, \f(CW%opts\fR)" 4
.IX Item "Net::Fluidinfo::Object->get_by_id($fin, $id, %opts)"
Retrieves the object with \s-1ID\s0 \f(CW$id\fR from Fluidinfo. Options are:
.RS 4
.IP "about (optional, default false)" 4
.IX Item "about (optional, default false)"
Tells \f(CW\*(C`get\*(C'\fR whether you want to get the about attribute of the object.
.Sp
If about is not fetched \f(CW\*(C`has_about\*(C'\fR will be false even if the object
has an about attribute in Fluidinfo.
.RE
.RS 4
.Sp
\&\f(CW\*(C`Net::Fluidinfo\*(C'\fR provides a convenience shortcut for this method.
.RE
.ie n .IP "Net::Fluidinfo::Object\->get_by_about($fin, $about)" 4
.el .IP "Net::Fluidinfo::Object\->get_by_about($fin, \f(CW$about\fR)" 4
.IX Item "Net::Fluidinfo::Object->get_by_about($fin, $about)"
Retrieves the object with about \f(CW$about\fR from Fluidinfo.
.Sp
\&\f(CW\*(C`Net::Fluidinfo\*(C'\fR provides a convenience shortcut for this method.
.ie n .IP "Net::Fluidinfo::Object\->search($fin, $query)" 4
.el .IP "Net::Fluidinfo::Object\->search($fin, \f(CW$query\fR)" 4
.IX Item "Net::Fluidinfo::Object->search($fin, $query)"
Performs the query \f(CW$query\fR and returns a (possibly empty) array of strings with
the IDs of the macthing objects.
.Sp
\&\f(CW\*(C`Net::Fluidinfo\*(C'\fR provides a convenience shortcut for this method.
.ie n .IP "Net::Fluidinfo::Object\->has_tag($fin, $object_id, $tag_or_tag_path)" 4
.el .IP "Net::Fluidinfo::Object\->has_tag($fin, \f(CW$object_id\fR, \f(CW$tag_or_tag_path\fR)" 4
.IX Item "Net::Fluidinfo::Object->has_tag($fin, $object_id, $tag_or_tag_path)"
When you retrieve an object from Fluidinfo the instance has the paths
of its tags as an attribute. But if you only have an object \s-1ID\s0 and
are interested in checking whether the corresponding object has been
tagged with a certain tag, this predicate is cheaper than fetching
the object.
.Sp
You can pass either a Net::Fluidinfo::Tag instance or a tag path
in the rightmost argument.
.SS "Instance Methods"
.IX Subsection "Instance Methods"
.ie n .IP "$object\->create" 4
.el .IP "\f(CW$object\fR\->create" 4
.IX Item "$object->create"
Creates the object in Fluidinfo.
.ie n .IP "$object\->id" 4
.el .IP "\f(CW$object\fR\->id" 4
.IX Item "$object->id"
Returns the \s-1UUID\s0 of the object, or \f(CW\*(C`undef\*(C'\fR if it is new.
.ie n .IP "$object\->has_id" 4
.el .IP "\f(CW$object\fR\->has_id" 4
.IX Item "$object->has_id"
Predicate to test whether the object has an \s-1ID\s0.
.ie n .IP "$object\->about" 4
.el .IP "\f(CW$object\fR\->about" 4
.IX Item "$object->about"
.PD 0
.ie n .IP "$object\->about($about)" 4
.el .IP "\f(CW$object\fR\->about($about)" 4
.IX Item "$object->about($about)"
.PD
Gets/sets the about attribute. About can't be modified in existing
objects, the setter is only useful for new objects.
.Sp
Note that you need to set the \f(CW\*(C`about\*(C'\fR flag when you fetch an object
for this attribute to be initialized.
.ie n .IP "$object\->has_about" 4
.el .IP "\f(CW$object\fR\->has_about" 4
.IX Item "$object->has_about"
Says whether the object has an about attribute.
.Sp
Note that you need to set the \f(CW\*(C`about\*(C'\fR flag when you fetch an object
for this attribute to be initialized.
.ie n .IP "$object\->tag_paths" 4
.el .IP "\f(CW$object\fR\->tag_paths" 4
.IX Item "$object->tag_paths"
Returns the paths of the existing tags on the object as a (possibly
empty) arrayref of strings.
.ie n .IP "$object\->tag($tag_or_tag_path)" 4
.el .IP "\f(CW$object\fR\->tag($tag_or_tag_path)" 4
.IX Item "$object->tag($tag_or_tag_path)"
.PD 0
.ie n .IP "$object\->tag($tag_or_tag_path, $value)" 4
.el .IP "\f(CW$object\fR\->tag($tag_or_tag_path, \f(CW$value\fR)" 4
.IX Item "$object->tag($tag_or_tag_path, $value)"
.ie n .IP "$object\->tag($tag_or_tag_path, $type => $value)" 4
.el .IP "\f(CW$object\fR\->tag($tag_or_tag_path, \f(CW$type\fR => \f(CW$value\fR)" 4
.IX Item "$object->tag($tag_or_tag_path, $type => $value)"
.PD
Tags an object.
.Sp
You can pass either a Net::Fluidinfo::Tag instance or a tag path
in the first argument.
.RS 4
.IP "Native values" 4
.IX Item "Native values"
You need to specify the Fluidinfo type of native values using one of
\&\*(L"null\*(R", \*(L"boolean\*(R", \*(L"integer\*(R", \*(L"float\*(R", \*(L"string\*(R", or \*(L"list_of_strings\*(R":
.Sp
.Vb 1
\&    $object\->tag("fxn/rating", integer => 7);
.Ve
.Sp
If \f(CW$value\fR is \f(CW\*(C`undef\*(C'\fR or an arrayref this is not required:
.Sp
.Vb 3
\&    $object\->tag("fxn/tags");                    # type null (inferred)
\&    $object\->tag("fxn/tags", undef);             # type null (inferred)
\&    $object\->tag("fxn/tags", ["perl", "moose"]); # type list_of_strings (inferred)
.Ve
.Sp
The elements of arrayrefs are stringfied if needed to ensure we send
a list of strings.
.IP "Non-native values" 4
.IX Item "Non-native values"
To tag with a non-native value use a suitable \s-1MIME\s0 type for it:
.Sp
.Vb 1
\&    $object\->tag("fxn/foaf", "application/rdf+xml" => $foaf);
.Ve
.RE
.RS 4
.RE
.ie n .IP "$object\->value($tag_or_tag_path)" 4
.el .IP "\f(CW$object\fR\->value($tag_or_tag_path)" 4
.IX Item "$object->value($tag_or_tag_path)"
Gets the value of a tag on an object.
.Sp
You can refer to the tag either with a Net::Fluidinfo::Tag instance or a tag path.
.Sp
This method returns the very value in scalar context:
.Sp
.Vb 1
\&    $value = $object\->value("fxn/rating");
.Ve
.Sp
and also the type in list context:
.Sp
.Vb 1
\&    ($type, $value) = $object\->value("fxn/rating");
.Ve
.Sp
For native values the type is one of \*(L"null\*(R", \*(L"boolean\*(R", \*(L"integer\*(R", \*(L"float\*(R",
\&\*(L"string\*(R", or \*(L"list_of_strings\*(R". For non-native values the type is their \s-1MIME\s0 type.
.ie n .IP "$object\->untag($tag_or_tag_path)" 4
.el .IP "\f(CW$object\fR\->untag($tag_or_tag_path)" 4
.IX Item "$object->untag($tag_or_tag_path)"
Untags an object.
.SH "FLUIDINFO DOCUMENTATION"
.IX Header "FLUIDINFO DOCUMENTATION"
.IP "Fluidinfo high-level description" 4
.IX Item "Fluidinfo high-level description"
<http://doc.fluidinfo.com/fluidDB/objects.html>
.IP "Fluidinfo \s-1API\s0 documentation" 4
.IX Item "Fluidinfo API documentation"
<http://doc.fluidinfo.com/fluidDB/api/objects.html>
.IP "Fluidinfo \s-1API\s0 specification" 4
.IX Item "Fluidinfo API specification"
<http://api.fluidinfo.com/fluidDB/api/*/objects/*>
.SH "AUTHOR"
.IX Header "AUTHOR"
Xavier Noria (\s-1FXN\s0), <fxn@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009\-2012 Xavier Noria
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See <http://dev.perl.org/licenses/> for more information.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 438:" 4
.IX Item "Around line 438:"
\&'=item' outside of any '=over'
