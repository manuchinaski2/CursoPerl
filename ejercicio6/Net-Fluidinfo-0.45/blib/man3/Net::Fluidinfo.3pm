.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Fluidinfo 3"
.TH Net::Fluidinfo 3 "2012-02-12" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Fluidinfo \- A Perl interface to Fluidinfo
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Net::Fluidinfo;
\&
\& # Predefined Fluidinfo client for playing around, points
\& # to the sandbox with user test/test
\& $fin = Net::Fluidinfo\->new_for_testing;
\& $fin = Net::Fluidinfo\->new_for_testing(trace_http => 1);
\&
\& # Fluidinfo client pointing to production
\& $fin = Net::Fluidinfo\->new(username => \*(Aqusername\*(Aq, password => \*(Aqpassword\*(Aq);
\&
\& # Fluidinfo taking credentials from environment variables
\& # FLUIDINFO_USERNAME and FLUIDINFO_PASSWORD
\& $fin = Net::Fluidinfo\->new;
\&
\& # Content\-MD5 headers with checksums for requests with payload
\& $fin = Net::Fluidinfo\->new(md5 => 1)
\&
\& # Resource getters
\& $object     = $fin\->get_object_by_id($id, about => 1);
\& $object     = $fin\->get_object_by_about($about);
\& $ns         = $fin\->get_namespace($path, description => 1);
\& $tag        = $fin\->get_tag($path, description => 1);
\& $permission = $fin\->get_permission($category, $path_or_has_path, $action);
\& $user       = $fin\->get_user($username);
\&
\& # Object search
\& @ids = $fin\->search("has fxn/rating");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::Fluidinfo\*(C'\fR provides an interface to the Fluidinfo \s-1API\s0.
.PP
The documentation of Net::Fluidinfo does not explain Fluidinfo, though there are
links to relevant pages in the documentation of each class.
.PP
If you want to get familiar with Fluidinfo please check these pages:
.IP "Fluidinfo high-level description" 4
.IX Item "Fluidinfo high-level description"
<http://doc.fluidinfo.com/fluidDB/>
.IP "Fluidinfo \s-1API\s0 documentation" 4
.IX Item "Fluidinfo API documentation"
<http://doc.fluidinfo.com/fluidDB/api/>
.IP "Fluidinfo \s-1API\s0 specification" 4
.IX Item "Fluidinfo API specification"
<http://api.fluidinfo.com/fluidDB/api/*/*/*>
.IP "Fluidinfo Essence blog posts" 4
.IX Item "Fluidinfo Essence blog posts"
<http://blogs.fluidinfo.com/fluidDB/category/essence/>
.SH "USAGE"
.IX Header "USAGE"
.SS "Class Methods"
.IX Subsection "Class Methods"
.IP "Net::Fluidinfo\->new(%attrs)" 4
.IX Item "Net::Fluidinfo->new(%attrs)"
Returns an object for communicating with Fluidinfo.
.Sp
This is a wrapper around LWP::UserAgent and does not validate
credentials in the very constructor. If they are wrong requests
will fail when performed.
.Sp
Attributes and options are:
.RS 4
.IP "username" 4
.IX Item "username"
Your username in Fluidinfo. If not present uses the value of the
environment variable \s-1FLUIDINFO_USERNAME\s0.
.IP "password" 4
.IX Item "password"
Your password in Fluidinfo. If not present uses the value of the
environment variable \s-1FLUIDINFO_PASSWORD\s0.
.IP "protocol" 4
.IX Item "protocol"
Either '\s-1HTTP\s0' or '\s-1HTTPS\s0'. Defaults to '\s-1HTTP\s0'.
.IP "host" 4
.IX Item "host"
The Fluidinfo host. Defaults to \fIfluiddb.fluidinfo.com\fR.
.IP "md5" 4
.IX Item "md5"
If this flag is true requests with payload get a Content\-MD5
header with a checksum.
.IP "trace_http_requests" 4
.IX Item "trace_http_requests"
A flag, logs all \s-1HTTP\s0 requests if true.
.IP "trace_http_responses" 4
.IX Item "trace_http_responses"
A flag, logs all \s-1HTTP\s0 responses if true.
.IP "trace_http" 4
.IX Item "trace_http"
A flag, logs all \s-1HTTP\s0 requests and responses if true. (Shorthand for
enabling the two above.)
.RE
.RS 4
.RE
.IP "Net::Fluidinfo\->new_for_testing" 4
.IX Item "Net::Fluidinfo->new_for_testing"
Returns a \f(CW\*(C`Net::Fluidinfo\*(C'\fR instance pointing to the sandbox with
\&\*(L"test\*(R"/\*(L"test\*(R". The host of the sandbox can be checked in the package
variable \f(CW$Net::Fluidinfo::SANDBOX_HOST\fR.
.SH "Instance Methods"
.IX Header "Instance Methods"
.ie n .IP "$fin\->username" 4
.el .IP "\f(CW$fin\fR\->username" 4
.IX Item "$fin->username"
.PD 0
.ie n .IP "$fin\->username($username)" 4
.el .IP "\f(CW$fin\fR\->username($username)" 4
.IX Item "$fin->username($username)"
.PD
Gets/sets the username.
.ie n .IP "$fin\->password" 4
.el .IP "\f(CW$fin\fR\->password" 4
.IX Item "$fin->password"
.PD 0
.ie n .IP "$fin\->password($password)" 4
.el .IP "\f(CW$fin\fR\->password($password)" 4
.IX Item "$fin->password($password)"
.PD
Gets/sets the password.
.ie n .IP "$fin\->protocol" 4
.el .IP "\f(CW$fin\fR\->protocol" 4
.IX Item "$fin->protocol"
.PD 0
.ie n .IP "$fin\->protocol($protocol)" 4
.el .IP "\f(CW$fin\fR\->protocol($protocol)" 4
.IX Item "$fin->protocol($protocol)"
.PD
Gets/sets the protocol, either '\s-1HTTP\s0' or '\s-1HTTPS\s0'.
.ie n .IP "$fin\->ua" 4
.el .IP "\f(CW$fin\fR\->ua" 4
.IX Item "$fin->ua"
Returns the instance of LWP::UserAgent used to communicate with Fluidinfo.
.ie n .IP "$fin\->user" 4
.el .IP "\f(CW$fin\fR\->user" 4
.IX Item "$fin->user"
Returns the user on behalf of whom fin is doing calls. This attribute
is lazy loaded.
.ie n .IP "$fin\->get_object_by_id" 4
.el .IP "\f(CW$fin\fR\->get_object_by_id" 4
.IX Item "$fin->get_object_by_id"
Convenience shortcut for \f(CW\*(C`Net::Fluidinfo::Object::get_by_id\*(C'\fR, see Net::Fluidinfo::Object.
.ie n .IP "$fin\->get_object_by_about" 4
.el .IP "\f(CW$fin\fR\->get_object_by_about" 4
.IX Item "$fin->get_object_by_about"
Convenience shortcut for \f(CW\*(C`Net::Fluidinfo::Object::get_by_about\*(C'\fR, see Net::Fluidinfo::Object.
.ie n .IP "$fin\->search" 4
.el .IP "\f(CW$fin\fR\->search" 4
.IX Item "$fin->search"
Convenience shortcut for \f(CW\*(C`Net::Fluidinfo::Object::search\*(C'\fR, see Net::Fluidinfo::Object.
.ie n .IP "$fin\->get_namespace" 4
.el .IP "\f(CW$fin\fR\->get_namespace" 4
.IX Item "$fin->get_namespace"
Convenience shortcut for \f(CW\*(C`Net::Fluidinfo::Namespace::get\*(C'\fR, see Net::Fluidinfo::Namespace.
.ie n .IP "$fin\->get_tag" 4
.el .IP "\f(CW$fin\fR\->get_tag" 4
.IX Item "$fin->get_tag"
Convenience shortcut for \f(CW\*(C`Net::Fluidinfo::Tag::get\*(C'\fR, see Net::Fluidinfo::Tag.
.ie n .IP "$fin\->get_permission" 4
.el .IP "\f(CW$fin\fR\->get_permission" 4
.IX Item "$fin->get_permission"
Convenience shortcut for \f(CW\*(C`Net::Fluidinfo::Permission::get\*(C'\fR, see Net::Fluidinfo::Permission.
.ie n .IP "$fin\->get_user" 4
.el .IP "\f(CW$fin\fR\->get_user" 4
.IX Item "$fin->get_user"
Convenience shortcut for \f(CW\*(C`Net::Fluidinfo::User::get\*(C'\fR, see Net::Fluidinfo::User.
.SH "AUTHOR"
.IX Header "AUTHOR"
Xavier Noria (\s-1FXN\s0), <fxn@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009\-2012 Xavier Noria
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See <http://dev.perl.org/licenses/> for more information.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 254:" 4
.IX Item "Around line 254:"
You forgot a '=back' before '=head1'
