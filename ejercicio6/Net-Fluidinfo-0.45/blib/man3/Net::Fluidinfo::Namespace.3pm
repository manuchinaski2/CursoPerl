.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Fluidinfo::Namespace 3"
.TH Net::Fluidinfo::Namespace 3 "2012-02-11" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Fluidinfo::Namespace \- Fluidinfo namespaces
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Net::Fluidinfo::Namespace;
\&
\& # create
\& $ns = Net::Fluidinfo::Namespace\->new(
\&    fin         => $fin,
\&    description => $description,
\&    path        => $path
\& );
\& $ns\->create;
\&
\& # get, optionally fetching descrition
\& $ns = Net::Fluidinfo::Namespace\->get($fin, $path, description => 1);
\& $ns\->parent;
\& 
\& # update
\& $ns\->description($new_description);
\& $ns\->update;
\&
\& # delete
\& $ns\->delete;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::Fluidinfo::Namespace\*(C'\fR models Fluidinfo namespaces.
.SH "USAGE"
.IX Header "USAGE"
.SS "Inheritance"
.IX Subsection "Inheritance"
\&\f(CW\*(C`Net::Fluidinfo::Namespace\*(C'\fR is a subclass of Net::Fluidinfo::Base.
.SS "Roles"
.IX Subsection "Roles"
\&\f(CW\*(C`Net::Fluidinfo::Namespace\*(C'\fR consumes the roles Net::Fluidinfo::HasObject, and Net::Fluidinfo::HasPath.
.SS "Class methods"
.IX Subsection "Class methods"
.IP "Net::Fluidinfo::Namespace\->new(%attrs)" 4
.IX Item "Net::Fluidinfo::Namespace->new(%attrs)"
Constructs a new namespace. The constructor accepts these parameters:
.RS 4
.IP "fin (required)" 4
.IX Item "fin (required)"
An instance of Net::Fluidinfo.
.IP "description (optional)" 4
.IX Item "description (optional)"
A description of this namespace.
.IP "parent (optional, but dependent)" 4
.IX Item "parent (optional, but dependent)"
The namespace you want to put this namespace into. An instance of Net::Fluidinfo::Namespace
representing an existing namespace in Fluidinfo.
.IP "name (optional, but dependent)" 4
.IX Item "name (optional, but dependent)"
The name of the namespace, which is the rightmost segment of its path.
The name of \*(L"fxn/perl\*(R" is \*(L"perl\*(R".
.IP "path (optional, but dependent)" 4
.IX Item "path (optional, but dependent)"
The path of the namespace, for example \*(L"fxn/perl\*(R".
.RE
.RS 4
.Sp
The \f(CW\*(C`description\*(C'\fR attribute is not required because Fluidinfo allows fetching namespaces
without their description. It must be defined when creating or updating namespaces though.
.Sp
The attributes \f(CW\*(C`parent\*(C'\fR, \f(CW\*(C`path\*(C'\fR, and \f(CW\*(C`name\*(C'\fR are mutually dependent. Ultimately
namespace creation has to be able to send the path of the parent and the name of the
namespace to Fluidinfo. So you can set \f(CW\*(C`parent\*(C'\fR and \f(CW\*(C`name\*(C'\fR, or just \f(CW\*(C`path\*(C'\fR.
.Sp
This constructor is only useful for creating new namespaces in Fluidinfo. Existing
namespaces are fetched with \f(CW\*(C`get\*(C'\fR.
.RE
.ie n .IP "Net::Fluidinfo::Namespace\->get($fin, $path, %opts)" 4
.el .IP "Net::Fluidinfo::Namespace\->get($fin, \f(CW$path\fR, \f(CW%opts\fR)" 4
.IX Item "Net::Fluidinfo::Namespace->get($fin, $path, %opts)"
Retrieves the namespace with path \f(CW$path\fR from Fluidinfo. Options are:
.RS 4
.IP "description (optional, default false)" 4
.IX Item "description (optional, default false)"
Tells \f(CW\*(C`get\*(C'\fR whether you want to fetch the description.
.IP "namespace_names (optional, default false)" 4
.IX Item "namespace_names (optional, default false)"
Tells \f(CW\*(C`get\*(C'\fR whether you want to fetch the names of child namespaces.
.IP "tag_names (optional, default false)" 4
.IX Item "tag_names (optional, default false)"
Tells \f(CW\*(C`get\*(C'\fR whether you want to fetch the names of child tags.
.RE
.RS 4
.Sp
\&\f(CW\*(C`Net::Fluidinfo\*(C'\fR provides a convenience shortcut for this method.
.RE
.SS "Instance Methods"
.IX Subsection "Instance Methods"
.ie n .IP "$ns\->create" 4
.el .IP "\f(CW$ns\fR\->create" 4
.IX Item "$ns->create"
Creates the namespace in Fluidinfo. Please note that namespaces are
created on the fly by Fluidinfo if they do not exist.
.Sp
Creating a namespace by hand may be useful for example if you want
to change the inherited permissions right away. Other than that, it
is recommended that you let Fluidinfo create namespaces as needed.
.ie n .IP "$ns\->update" 4
.el .IP "\f(CW$ns\fR\->update" 4
.IX Item "$ns->update"
Updates the namespace in Fluidinfo. Only the description can be modified.
.ie n .IP "$ns\->delete" 4
.el .IP "\f(CW$ns\fR\->delete" 4
.IX Item "$ns->delete"
Deletes the namespace in Fluidinfo.
.ie n .IP "$ns\->description" 4
.el .IP "\f(CW$ns\fR\->description" 4
.IX Item "$ns->description"
.PD 0
.ie n .IP "$ns\->description($description)" 4
.el .IP "\f(CW$ns\fR\->description($description)" 4
.IX Item "$ns->description($description)"
.PD
Gets/sets the description of the namespace.
.Sp
Note that you need to set the \f(CW\*(C`description\*(C'\fR flag when you fetch a
namespace for this attribute to be initialized.
.ie n .IP "$ns\->namespace_names" 4
.el .IP "\f(CW$ns\fR\->namespace_names" 4
.IX Item "$ns->namespace_names"
Returns the names of the child namespaces as a (possibly empty) arrayref of
strings.
.Sp
Note that you need to set the \f(CW\*(C`namespace_names\*(C'\fR flag when you fetch a
namespace for this attribute to be initialized.
.ie n .IP "$ns\->tag_names" 4
.el .IP "\f(CW$ns\fR\->tag_names" 4
.IX Item "$ns->tag_names"
Returns the names of the child tags as a (possibly empty) arrayref of strings.
.Sp
Note that you need to set the \f(CW\*(C`tag_names\*(C'\fR flag when you fetch a namespace for this
attribute to initialized.
.ie n .IP "$ns\->parent" 4
.el .IP "\f(CW$ns\fR\->parent" 4
.IX Item "$ns->parent"
The parent of the namespace, as an instance of Net::Fluidinfo::Namespace.
This attribute is lazy loaded.
.ie n .IP "$ns\->name" 4
.el .IP "\f(CW$ns\fR\->name" 4
.IX Item "$ns->name"
The name of the namespace.
.ie n .IP "$ns\->path" 4
.el .IP "\f(CW$ns\fR\->path" 4
.IX Item "$ns->path"
The path of the namespace.
.SH "FLUIDINFO DOCUMENTATION"
.IX Header "FLUIDINFO DOCUMENTATION"
.IP "Fluidinfo high-level description" 4
.IX Item "Fluidinfo high-level description"
<http://doc.fluidinfo.com/fluidDB/namespaces.html>
.IP "Fluidinfo \s-1API\s0 documentation" 4
.IX Item "Fluidinfo API documentation"
http://doc.fluidinfo.com/fluidDB/api/namespaces\-and\-tags.html <http://doc.fluidinfo.com/fluidDB/api/namespaces-and-tags.html>
.IP "Fluidinfo \s-1API\s0 specification" 4
.IX Item "Fluidinfo API specification"
<http://api.fluidinfo.com/fluidDB/api/*/namespaces/*>
.SH "AUTHOR"
.IX Header "AUTHOR"
Xavier Noria (\s-1FXN\s0), <fxn@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009\-2012 Xavier Noria
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See <http://dev.perl.org/licenses/> for more information.
